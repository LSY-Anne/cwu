$PBExportHeader$f_mana_data_help_tmp.srf
$PBExportComments$관리항목의 내용 도움말 처리
global type f_mana_data_help_tmp from function_object
end type

forward prototypes
global subroutine f_mana_data_help_tmp (datawindow adw_drcr, integer ai_row, string as_colname, datawindow adw_migyul)
end prototypes

global subroutine f_mana_data_help_tmp (datawindow adw_drcr, integer ai_row, string as_colname, datawindow adw_migyul);// ==========================================================================================
// Function Name	:	f_mana_data_help
// Function 설명	:	관리항목 내용 도움말 조회
// Argument			:	datawindow(현재 Datawindow)
// 						ai_row(현재행)
//							as_colname(현재행의 컬럼명)
// Return			:
// ==========================================================================================
s_hfn_com	lstr_com, lstr_Rtn
string		ls_colname, ls_coldata
integer		li_mana_code
DataStore	lds_migyul
long			ll_find, ll_row
double		ldb_slip_amt

choose case as_colname
	case 'mana_data1'
		ls_colname   = 'mana_code1'
		ls_coldata   = 'com_mana1_name'
		li_mana_code = adw_drcr.getitemnumber(ai_row, 'mana_code1')
	case 'mana_data2'
		ls_colname   = 'mana_code2'
		ls_coldata   = 'com_mana2_name'
		li_mana_code = adw_drcr.getitemnumber(ai_row, 'mana_code2')
	case 'mana_data3'
		ls_colname   = 'mana_code3'
		ls_coldata   = 'com_mana2_name'
		li_mana_code = adw_drcr.getitemnumber(ai_row, 'mana_code3')
	case 'mana_data4'
		ls_colname   = 'mana_code4'
		ls_coldata   = 'com_mana2_name'
		li_mana_code = adw_drcr.getitemnumber(ai_row, 'mana_code4')
end choose

if adw_drcr.getitemstring(ai_row, 'com_mi_gubun') = 'Y' then
	if adw_drcr.getitemstring(ai_row, 'drcr_class') <> adw_drcr.getitemstring(ai_row, 'com_drcr_class') then
		if adw_drcr.getitemnumber(ai_row, ls_colname) = adw_drcr.getitemnumber(ai_row, 'com_mana_code') then
			lstr_com.ls_item[1] = string(adw_drcr.getitemnumber(ai_row, 'acct_class'))
			lstr_com.ls_item[2] = adw_drcr.getitemstring(ai_row, 'acct_code')
			
			//2005.08.25 : 미지급금 계정에 대한 새로운 상계 루틴....
			if left(adw_drcr.getitemstring(ai_row, 'acct_code'), 4) = '2141' then
				lstr_com.ll_item[1] = ai_row
				lstr_com.ldw_item[1] = adw_migyul
				
				openwithparm(w_hfn_sang_data_1, lstr_com)
				
				
				//제대로 리턴이 되면...
				if Not isNull(Message.PowerObjectParm) then
				
					lds_migyul = Create DataStore    // 메모리에 할당
					lds_migyul = Message.PowerObjectParm
					lds_migyul.SetTransObject(sqlca)
					
					//1. 이전 Data를 지운다.
					ll_find = adw_migyul.find("slip_row = "+string(ai_row), 0, adw_migyul.rowcount())
					
					do while ll_find <> 0
						adw_migyul.DeleteRow(ll_find)
						ll_find = adw_migyul.find("slip_row = "+string(ai_row), ll_find, adw_migyul.rowcount())
					loop
					
					//2. 리턴된 데이타를 DataWindow(adw_migyul)에 update시킨다.
					lds_migyul.RowsCopy(1, lds_migyul.RowCount(), Primary!, adw_migyul, 1, Primary!)
					
				
					//3. 리턴된 데이타에서 미결계정 정보를 전표내역에 출력한다.
					adw_drcr.setitem(ai_row, as_colname, lds_migyul.getItemString(1, 'mana_data'))
					adw_drcr.setitem(ai_row, ls_coldata, lds_migyul.getItemString(1, 'mana_data_name'))
					for ll_row = 1 to lds_migyul.rowcount()
						ldb_slip_amt += lds_migyul.object.slip_amt[ll_row]
					next
					adw_drcr.setitem(ai_row, 'slip_amt', ldb_slip_amt)
					/*
					if lds_migyul.RowCount() > 0 then
						idw_main[2].Object.proof_date[idw_main[2].getRow()] 		= lds_tax.Object.tax_date[1]
						idw_main[2].Object.mana_data1[idw_main[2].getRow()] 		= lds_tax.Object.tax_cust_no[1]
						idw_main[2].Object.com_mana1_name[idw_main[2].getRow()] 	= lds_tax.Object.cust_name[1]
						idw_main[2].Object.remark[idw_main[2].getRow()] 			= lds_tax.Object.remark[1]
					else
						idw_main[2].Object.proof_date[idw_main[2].getRow()] 		= ''
						idw_main[2].Object.mana_data1[idw_main[2].getRow()] 		= ''
						idw_main[2].Object.com_mana1_name[idw_main[2].getRow()] 	= ''
						idw_main[2].Object.remark[idw_main[2].getRow()] 			= ''
					end if
					*/
					
				else
					//1. 이전 Data를 지운다.
					ll_find = adw_migyul.find("slip_row = "+string(ai_row), 0, adw_migyul.rowcount())
					
					do while ll_find <> 0
						adw_migyul.DeleteRow(ll_find)
						ll_find = adw_migyul.find("slip_row = "+string(ai_row), ll_find, adw_migyul.rowcount())
					loop
					
					adw_drcr.setitem(ai_row, as_colname, '')
					adw_drcr.setitem(ai_row, ls_coldata, '')
					adw_drcr.setitem(ai_row, ls_colname, '')
				end if
				return
				
			else
				
				openwithparm(w_hfn_sang_data, lstr_com)
		
				lstr_rtn = message.powerobjectparm
			
				if not isvalid(lstr_rtn) then
					adw_drcr.setitem(ai_row, ls_colname, '')
					return
				end if
			
				adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
				adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
				if adw_drcr.dataobject = 'd_hfn201a_3' then
					if adw_drcr.getitemnumber(ai_row, 'resol_amt') > dec(lstr_rtn.ls_item[3]) then
						adw_drcr.setitem(ai_row, 'resol_amt', 0)
						messagebox('확인', '상계금액의 잔액보다 결의금액이 클 수 없습니다.')
						return
					end if
				else
					if adw_drcr.getitemnumber(ai_row, 'slip_amt') > dec(lstr_rtn.ls_item[3]) then
						adw_drcr.setitem(ai_row, 'slip_amt', 0)
						messagebox('확인', '상계금액의 잔액보다 전표금액이 클 수 없습니다.')
						return
					end if
				end if
				return
			
			end if
		end if
	end if
end if

choose case li_mana_code
	case 1		// 계좌번호
		open(w_hfn003m)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
	case 2		// 거래처번호
		open(w_hfn_cust)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
	case 3		// 인사번호
		lstr_com.ls_item[1] = ''
		lstr_com.ls_item[2] = ''
		lstr_com.ls_item[3] = ''
		
		openwithparm(w_hin000h, lstr_com)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[2])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[1])
	case 4		// 카드번호
		open(w_hfn009m)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
	case 6		// 차입금번호
		open(w_hfn005m)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
	case 7		// 수표번호
		open(w_hfn004m)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
	case 8		// 증권번호
		open(w_hfn006m)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
	case 10		// 은행
		open(w_hfn000m)
		
		lstr_rtn = message.powerobjectparm
			
		if not isvalid(lstr_rtn) then
			adw_drcr.setitem(ai_row, ls_colname, '')
			adw_drcr.setitem(ai_row, as_colname, '')
			return
		end if
		
		adw_drcr.setitem(ai_row, as_colname, lstr_rtn.ls_item[1])
		adw_drcr.setitem(ai_row, ls_coldata, lstr_rtn.ls_item[2])
end choose

end subroutine

